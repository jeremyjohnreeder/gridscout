#! /usr/bin/env python2.7

from collections import namedtuple
import colorama
from colorama import Back, Fore, Style
import fileinput
from googlemaps import Client
from googlemaps.places import places_nearby
import mgrs
from mgrs.core import RTreeError
import os
from os import path
import pdb
import re
import readline
import sys
from sys import stderr
from schema import Schema, SchemaError
import time
import webbrowser

import fcntl, termios, struct # Used in determining screen size

class M:
	log_filename      = 'log/gridscout.log'
	key_filename      = 'config/google_places.key'
	default_base_mgrs = '11TNJ63372982'
	prompt            = 'gridscout> '
	prompt_style      = Style.DIM
	input_style       = Style.NORMAL

	min_name_width    = 25
	other_width       = 50
	row_id            = None
	results_mgrs_only = []

	ResultTuple       = namedtuple('ResultTuple', 'name address lat lng')

	result_schema     = Schema({'name': unicode,
	                            'vicinity': unicode,
	                            'geometry': {'location': {'lat': float, 'lng': float},
	                                         unicode   : object},
	                            unicode   : object})

	def __init__(self):
		colorama.init()
		os.chdir(path.dirname(path.realpath(sys.argv[0]))) # Goes to the location of the script
		with open(self.log_filename, 'w') as f:
			f.write('--- GridScout Log ---\n')

		with open(self.key_filename, 'r') as f:
			key = f.readline().strip()

		self.map_client = Client(key=key)
		self.converter  = mgrs.MGRS()
		self.reset_rows()

	def format_mgrs(self, mgrs):
		if not mgrs or len(mgrs) < 14:
			raise ValueError('mgrs = ' + mgrs)
		zone        = mgrs[:-12]
		zone_padded = (' ' + zone)[-3:]
		square      = mgrs[-12:-10]
		easting     = mgrs[-10:-6]
		northing    = mgrs[-5:-1]
		return Back.BLACK + Fore.WHITE + Style.DIM + zone_padded + Fore.CYAN + square + Style.NORMAL + Fore.WHITE + easting + Fore.CYAN + northing + Style.RESET_ALL

	def reset_rows(self):
		self._rows = []

	def add_row(self, row):
		self._rows.append(row)

	def output_columns(self):
		if self._rows:
			width = max([len(name) for _, name, _ in self._rows])
			formatter = u'{:<%s}' % width
			delimiter = '   '
			for point, name, address in self._rows:
				self.row_id += 1
				self.results_mgrs_only.append(self.strip_ansi_escapes(point.strip()))
				row_prefix = Style.BRIGHT + (' ' + str(self.row_id))[-2:] + Style.NORMAL + delimiter
				cc = row_prefix + point + delimiter + formatter.format(name)[:self.name_width()] + delimiter + address
				self.output(cc)

	def strip_ansi_escapes(self, text):
		ansiEscapeRegex = re.compile(r'\x1B\[[0-?]*[ -/]*[@-~]')
		return ansiEscapeRegex.sub('', text)

	def log(self, message):
		with open(self.log_filename, 'a') as f:
			plainMessage = self.strip_ansi_escapes(message)
			f.write(plainMessage.encode('utf-8') + '\n')

	def output(self, message):
		print message
		self.log(message)

	def result_tuple(self, result):
		try:
			self.result_schema.validate(result)
		except SchemaError:
			return

		geometry = result['geometry']
		location = geometry['location']

		r = self.ResultTuple( result['name'],
		                      result['vicinity'], # Stored as "address"
		                      location['lat'],
		                      location['lng'] )

		return r

	def name_width(self):
		# source: https://www.w3resource.com/python-exercises/python-basic-exercise-56.php
		_, terminal_width, _, _ = struct.unpack('HHHH',
		   fcntl.ioctl(0, termios.TIOCGWINSZ,
                     struct.pack('HHHH', 0, 0, 0, 0)))

		return max(terminal_width - self.other_width, self.min_name_width)


	def output_results(self, results):
		if results:
			self.reset_rows()
			for result in results:
				r = self.result_tuple(result)
				if not r:
					continue
				p = self.converter.toMGRS(r.lat, r.lng)
				if p and len(p) >= 14:
					p_formatted = self.format_mgrs(p)
					self.add_row((p_formatted, r.name, r.address))
			self.output_columns()
		else:
			print 'Found no such place.'

	def input_base_latlng(self):
		print Style.DIM    + '----------------------------------------'
		print Style.NORMAL + 'GridScout - Copyright 2018 Jeremy Reeder'
		print Style.DIM    + '----------------------------------------'
		print Style.NORMAL # Resets style and prints a blank line.
		print 'Set base location using MGRS coords. Default is for Boise, ID.'
		base_mgrs = None
		base_tuple = None
		while base_mgrs == None:
			base_mgrs_raw = raw_input(self.prompt_style + '[' + self.default_base_mgrs + ']> ' + self.input_style).strip()
			print Style.NORMAL
			if base_mgrs_raw == '':
				base_mgrs_raw = self.default_base_mgrs
			base_mgrs = base_mgrs_raw.upper()
			self.output('Base location: ' + base_mgrs + '\n')
			try:
				latlng_tuple = self.converter.toLatLon(base_mgrs)
				self.base_latlng = str(latlng_tuple[0])+',' + str(latlng_tuple[1]) #google-compatible format
			except RTreeError:
				stderr.write('Invalid MGRS!\n')
				base_mgrs = None

	def run(self):
		print 'Enter any query supported by Google Maps.'
		print 'Ctrl-C to quit.\n'
		has_searched_successfully = False
		has_given_detailed_view_instructions = False
		mgrs_10m_regex = re.compile(r'^[0-9]{1,2}[A-Z]{3}[0-9]{8}$')
		while True:
			query = raw_input(self.prompt_style + self.prompt + self.input_style)
			print Style.NORMAL # Resets style and prints a blank line.
			if query == '':
				continue
			self.log(self.prompt + query + '\n')
			if re.search(mgrs_10m_regex, query):
				self.results_mgrs_only.append(query)
				query = len(self.results_mgrs_only)
			if self.results_mgrs_only:
				try:
					result_id = int(query)
					if result_id >= 1 and result_id <= len(self.results_mgrs_only):
						mgrs = self.results_mgrs_only[result_id-1]
						url = 'https://mappingsupport.com/p/gmap4.php?mgrs=' + mgrs + '&t=s&z=18'
						self.output('Opening aerial view of ' + mgrs + '.')
						webbrowser.open(url, new=1)
						easting = mgrs[-8:-4]
						northing = mgrs[-4:]
						self.output('E=' + easting)
						self.output('N=' + northing)
						self.output('')
						continue
				except ValueError:
					pass
			finished_with_query = False
			next_page_token = None
			self.row_id = 0
			self.results_mgrs_only = []
			while not finished_with_query:
				response = places_nearby(client=self.map_client,
				                         location=self.base_latlng,
				                         radius=25000,
				                         keyword=query,
				                         rank_by='prominence',
				                         page_token=next_page_token)
				if 'results' in response:
					results = response['results']
					if results:
							has_searched_successfully = True
					self.output_results(results)
					self.output('')
				if 'next_page_token' in response:
					next_page_token = response['next_page_token']
				else:
					next_page_token = None
				finished_with_query = not next_page_token
				if not finished_with_query:
					# Google needs time to register the next-page token
					# after each page of results.
					time.sleep(2)
			if has_searched_successfully and not has_given_detailed_view_instructions:
				self.output("For additional details, enter a result ID number. (1-" + str(len(self.results_mgrs_only)) + ')')
				has_given_detailed_view_instructions = True
				self.output('')

m = M()
try:
	m.input_base_latlng()
	m.run()
except (KeyboardInterrupt, EOFError):
	sys.exit(0)
